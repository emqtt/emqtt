##--------------------------------------------------------------------
## EMQ X Retainer
##--------------------------------------------------------------------

## Where to store the retained messages.
##
## Notice that all nodes in the same cluster have to be configured to
emqx_retainer: {
  ## enable/disable emqx_retainer
  enable: true

  ## Periodic interval for cleaning up expired messages. Never clear if the value is 0.
  ##
  ## Value: Duration
  ##  - h: hour
  ##  - m: minute
  ##  - s: second
  ##
  ## Examples:
  ##  - 2h:  2 hours
  ##  - 30m: 30 minutes
  ##  - 20s: 20 seconds
  ##
  ## Default: 0s
  msg_clear_interval: 0s

  ## Message retention time. 0 means message will never be expired.
  ##
  ## Default: 0s
  msg_expiry_interval: 0s

  ## The message read and deliver flow rate control
  ## When a client subscribe to a wildcard topic, may many retained messages will be loaded.
  ## If you don't want these data loaded to the memory all at once, you can use this to control.
  ## The processing flow:
  ##   load max_read_number retained message from storage ->
  ##    deliver ->
  ##    repeat this, until all retianed messages are delivered
  ##
  flow_control: {
    ## The max messages number per read from storage. 0 means no limit
    ##
    ## Default: 0
    max_read_number: 0

    ## The max number of retained message can be delivered in emqx per quota_release_interval.0 means no limit
    ##
    ## Default: 0
    msg_deliver_quota: 0

    ## deliver quota reset interval
    ##
    ## Default: 0s
    quota_release_interval: 0s
  }

  ## Maximum retained message size.
  ##
  ## Value: Bytes
  max_payload_size: 1MB

  ## Storage connect parameters
  ##
  ## Value: mnesia
  ##
  connector:
    [
      {
       type: mnesia
       config: {
            ## storage_type: ram | disc | disc_only
            storage_type: ram

            ## Maximum number of retained messages. 0 means no limit.
            ##
            ## Value: Number >= 0
            max_retained_messages: 0
       }
      }
    ]
}
