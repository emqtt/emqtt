##--------------------------------------------------------------------
## EMQ X Gateway configurations
##--------------------------------------------------------------------

## TODO: These configuration options are temporary example here.
## In the final version, it will be commented out.

gateway.stomp {

  ## How long time the connection will be disconnected if the
  ## connection is established but no bytes received
  idle_timeout = 30s

  ## To control whether write statistics data into ETS table
  ## for dashbord to read.
  enable_stats = true

  ## When publishing or subscribing, prefix all topics with a mountpoint string.
  mountpoint = ""

  frame {
    max_headers = 10
    max_headers_length = 1024
    max_body_length = 8192
  }

  clientinfo_override {
    username = "${Packet.headers.login}"
    password = "${Packet.headers.passcode}"
  }

  authentication [
      # {
      #   name = "authenticator1"
      #   type = "password-based:built-in-database"
      #   user_id_type = clientid
      #  }
  ]

  listeners.tcp.default {
    bind = 61613
    acceptors = 16
    max_connections = 1024000
    max_conn_rate = 1000
    active_n = 100
  }
}

gateway.coap {

  ## How long time the connection will be disconnected if the
  ## connection is established but no bytes received
  idle_timeout = 30s

<<<<<<< HEAD
  ## To control whether write statistics data into ETS table
  ## for dashbord to read.
  enable_stats = true

  ## When publishing or subscribing, prefix all topics with a mountpoint string.
  mountpoint = ""
=======
  authentication {
    authenticators = [
      # {
      #   name = "authenticator1"
      #   mechanism = password-based
      #   server_type = built-in-database
      #   user_id_type = clientid
      # }
    ]
  }
>>>>>>> b61f766f (feat(new authn): temporary submission)

  heartbeat = 30s
  notify_type = qos
  subscribe_qos = qos0
  publish_qos = qos1

  authentication {
    name = "authenticator1"
    mechanism = password-based
    server_type = built-in-database
    user_id_type = clientid
  }

  listeners.udp.default {
    bind = 5683
  }
}

gateway.mqttsn {

  ## How long time the connection will be disconnected if the
  ## connection is established but no bytes received
  idle_timeout = 30s

  ## To control whether write statistics data into ETS table
  ## for dashbord to read.
  enable_stats = true

  ## When publishing or subscribing, prefix all topics with a mountpoint string.
  mountpoint = ""

  ## The MQTT-SN Gateway ID in ADVERTISE message.
  gateway_id = 1

  ## Enable broadcast this gateway to WLAN
  broadcast = true

  ## To control whether accept and process the received
  ## publish message with qos=-1.
  enable_qos3 = true

  ## The pre-defined topic name corresponding to the pre-defined topic
  ## id of N.
  ## Note that the pre-defined topic id of 0 is reserved.
  predefined = [
    { id = 1
      topic = "/predefined/topic/name/hello"
    },
    { id = 2
      topic = "/predefined/topic/name/nice"
    }
  ]

  ### ClientInfo override
  clientinfo_override {
    username = "mqtt_sn_user"
    password = "abc"
  }

  listeners.udp.default {
    bind = 1884
    max_connections = 10240000
    max_conn_rate = 1000
  }
}

<<<<<<< HEAD
gateway.lwm2m {

  ## How long time the connection will be disconnected if the
  ## connection is established but no bytes received
  idle_timeout = 30s
=======
gateway.exproto {
  ## The gRPC server to accept requests
  server {
    bind = 9100
    #ssl.keyfile:
    #ssl.certfile:
    #ssl.cacertfile:
  }

  handler {
    address = "http://127.0.0.1:9001"
    #ssl.keyfile:
    #ssl.certfile:
    #ssl.cacertfile:
  }

  listener.tcp.1 {
    bind = 7993
    acceptors = 8
    max_connections = 10240
    max_conn_rate = 1000
  }
>>>>>>> b61f766f (feat(new authn): temporary submission)

  ## To control whether write statistics data into ETS table
  ## for dashbord to read.
  enable_stats = true

  ## When publishing or subscribing, prefix all topics with a mountpoint string.
  mountpoint = "lwm2m"

  xml_dir = "{{ platform_etc_dir }}/lwm2m_xml"

  lifetime_min = 1s
  lifetime_max = 86400s
  qmode_time_windonw = 22
  auto_observe = false

  ## always | contains_object_list
  update_msg_publish_condition = contains_object_list


  translators {
    command  {
      topic = "dn/#"
      qos = 0
    }

    response {
      topic = "up/resp"
      qos = 0
    }

    notify {
      topic = "up/notify"
      qos = 0
    }

    register {
      topic = "up/resp"
      qos = 0
    }

    update {
      topic = "up/resp"
      qos = 0
    }
  }

  listeners.udp.default {
      bind = 5783
  }
}

gateway.exproto {

  ## How long time the connection will be disconnected if the
  ## connection is established but no bytes received
  idle_timeout = 30s

  ## To control whether write statistics data into ETS table
  ## for dashbord to read.
  enable_stats = true

  ## When publishing or subscribing, prefix all topics with a mountpoint string.
  mountpoint = ""

  ## The gRPC server to accept requests
  server {
    bind = 9100
    #ssl.keyfile:
    #ssl.certfile:
    #ssl.cacertfile:
  }

  handler {
    address = "http://127.0.0.1:9001"
    #ssl.keyfile:
    #ssl.certfile:
    #ssl.cacertfile:
  }

  listeners.tcp.default {
    bind = 7993
    acceptors = 8
    max_connections = 10240
    max_conn_rate = 1000
  }
  #listeners.ssl.default: {}
  #listeners.udp.default: {}
  #listeners.dtls.default: {}
}
