name: PR Entrypoint

concurrency:
  group: pr-entrypoint-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
  workflow_dispatch:
    inputs:
      ref:
        required: false

env:
  IS_CI: "yes"

jobs:
  sanity-checks:
    runs-on: ubuntu-22.04
    container: "ghcr.io/emqx/emqx-builder/5.3-5:1.15.7-26.2.1-2-ubuntu22.04"
    outputs:
      ct-matrix: ${{ steps.matrix.outputs.ct-matrix }}
      ct-host: ${{ steps.matrix.outputs.ct-host }}
      ct-docker: ${{ steps.matrix.outputs.ct-docker }}
      version-emqx: ${{ steps.matrix.outputs.version-emqx }}
      version-emqx-enterprise: ${{ steps.matrix.outputs.version-emqx-enterprise }}
      builder: "ghcr.io/emqx/emqx-builder/5.3-5:1.15.7-26.2.1-2-ubuntu22.04"
      builder_vsn: "5.3-5"
      otp_vsn: "26.2.1-2"
      elixir_vsn: "1.15.7"

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 0
      - name: Work around https://github.com/actions/checkout/issues/766
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Run gitlint
        env:
          BEFORE_REF: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
          AFTER_REF: ${{ github.sha }}
        run: |
          pip install --require-hashes -r .ci/gitlint.requirements.txt
          gitlint --commits $BEFORE_REF..$AFTER_REF --config .github/workflows/.gitlint
      - name: Run shellcheck
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get update -qy && apt-get install -qy shellcheck
          ./scripts/shellcheck.sh
      - name: Run shell tests
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get update -qy && apt-get install -qy shelltestrunner
          scripts/shelltest/run_tests.sh
      - name: Check workflow files
        env:
          ACTIONLINT_VSN: 1.6.25
        run: |
          wget -q https://github.com/rhysd/actionlint/releases/download/v${ACTIONLINT_VSN}/actionlint_${ACTIONLINT_VSN}_linux_$(dpkg --print-architecture).tar.gz -O actionlint.tar.gz
          tar zxf actionlint.tar.gz actionlint
          # TODO: enable shellcheck when all the current issues are fixed
          ./actionlint -color \
            -shellcheck= \
            -ignore 'label ".+" is unknown' \
            -ignore 'value "emqx-enterprise" in "exclude"' \
            -ignore 'value "emqx-enterprise-elixir" in "exclude"'
      - name: Check line-break at EOF
        run: |
          ./scripts/check-nl-at-eof.sh
      - name: Check apps version
        run: |
          ./scripts/apps-version-check.sh
      - name: Setup mix
        env:
          MIX_ENV: emqx-enterprise
          PROFILE: emqx-enterprise
        run: |
          # mix local.hex --force --if-missing && mix local.rebar --force --if-missing
          mix local.hex 2.0.6 --force --if-missing && mix local.rebar --force --if-missing
      - name: Check formatting
        env:
          MIX_ENV: emqx-enterprise
          PROFILE: emqx-enterprise
        run: |
          ./scripts/check-format.sh
      - name: Run elvis check
        run: |
          ./scripts/elvis-check.sh $GITHUB_BASE_REF
      - name: Generate CT Matrix
        id: matrix
        run: |
          APPS="$(./scripts/find-apps.sh --ci)"
          MATRIX="$(echo "${APPS}" | jq -c '
            [
              (.[] | select(.profile == "emqx") | . + {
                builder: "5.3-5",
                otp: "26.2.1-2",
                elixir: "1.15.7"
              }),
              (.[] | select(.profile == "emqx-enterprise") | . + {
                builder: "5.3-5",
                otp: ["26.2.1-2"][],
                elixir: "1.15.7"
              })
            ]
          ')"
          echo "${MATRIX}" | jq
          CT_MATRIX="$(echo "${MATRIX}" | jq -c 'map({profile, builder, otp, elixir}) | unique')"
          CT_HOST="$(echo "${MATRIX}"   | jq -c 'map(select(.runner == "host"))')"
          CT_DOCKER="$(echo "${MATRIX}" | jq -c 'map(select(.runner == "docker"))')"
          echo "ct-matrix=${CT_MATRIX}" | tee -a $GITHUB_OUTPUT
          echo "ct-host=${CT_HOST}"     | tee -a $GITHUB_OUTPUT
          echo "ct-docker=${CT_DOCKER}" | tee -a $GITHUB_OUTPUT
          echo "version-emqx=$(./pkg-vsn.sh emqx)" | tee -a $GITHUB_OUTPUT
          echo "version-emqx-enterprise=$(./pkg-vsn.sh emqx-enterprise)" | tee -a $GITHUB_OUTPUT

  compile:
    runs-on: ${{ endsWith(github.repository, '/emqx') && 'ubuntu-22.04' || fromJSON('["self-hosted","ephemeral-xl","linux","x64"]') }}
    container: ${{ needs.sanity-checks.outputs.builder }}
    needs:
      - sanity-checks
    strategy:
      matrix:
        profile:
          - emqx
          - emqx-enterprise

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0
      - name: Work around https://github.com/actions/checkout/issues/766
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - id: compile
        env:
          PROFILE: ${{ matrix.profile }}
          ENABLE_COVER_COMPILE: 1
        run: |
          make ensure-rebar3
          make ${PROFILE}-compile test-compile
          echo "PROFILE=${PROFILE}" | tee -a .env
          echo "PKG_VSN=$(./pkg-vsn.sh ${PROFILE})" | tee -a .env
          zip -ryq -x@.github/workflows/.zipignore $PROFILE.zip .
      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: ${{ matrix.profile }}
          path: ${{ matrix.profile }}.zip
          retention-days: 7

  run_emqx_app_tests:
    needs:
      - sanity-checks
      - compile
    uses: ./.github/workflows/run_emqx_app_tests.yaml
    with:
      builder: ${{ needs.sanity-checks.outputs.builder }}
      before_ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
      after_ref: ${{ github.sha }}

  eunit_and_proper:
    needs:
      - sanity-checks
      - compile
    runs-on: ${{ github.repository_owner == 'emqx' && fromJSON('["self-hosted","ephemeral","linux","x64"]') || 'ubuntu-22.04' }}
    name: "eunit_and_proper (${{ matrix.profile }})"
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.sanity-checks.outputs.ct-matrix) }}

    defaults:
      run:
        shell: bash
    container: "ghcr.io/emqx/emqx-builder/${{ matrix.builder }}:${{ matrix.elixir }}-${{ matrix.otp }}-ubuntu22.04"

    env:
      PROFILE: ${{ matrix.profile }}
      ENABLE_COVER_COMPILE: 1
      CT_COVER_EXPORT_PREFIX: ${{ matrix.profile }}-${{ matrix.otp }}

    permissions:
      contents: read

    steps:
      - uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: ${{ matrix.profile }}

      - name: extract artifact
        run: |
          unzip -o -q ${{ matrix.profile }}.zip
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
        # produces eunit.coverdata
      - run: make eunit

        # produces proper.coverdata
      - run: make proper

      - run: make cover

      - name: send to coveralls
        if: github.repository == 'emqx/emqx'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: make coveralls

      - run: cat rebar3.crashdump
        if: failure()

  ct_docker:
    needs:
      - sanity-checks
      - compile
    runs-on: ${{ github.repository_owner == 'emqx' && fromJSON('["self-hosted","ephemeral","linux","x64"]') || 'ubuntu-22.04' }}
    name: "${{ matrix.app }}-${{ matrix.suitegroup }} (${{ matrix.profile }})"
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.sanity-checks.outputs.ct-docker) }}

    defaults:
      run:
        shell: bash

    env:
      PROFILE: ${{ matrix.profile }}

    permissions:
      contents: read

    steps:
      - uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: ${{ matrix.profile }}
      - name: extract artifact
        run: |
          unzip -o -q ${{ matrix.profile }}.zip

        # produces $PROFILE-<app-name>-<otp-vsn>-sg<suitegroup>.coverdata
      - name: run common tests
        env:
          DOCKER_CT_RUNNER_IMAGE: "ghcr.io/emqx/emqx-builder/${{ matrix.builder }}:${{ matrix.elixir }}-${{ matrix.otp }}-ubuntu22.04"
          MONGO_TAG: "5"
          MYSQL_TAG: "8"
          PGSQL_TAG: "13"
          REDIS_TAG: "7.0"
          INFLUXDB_TAG: "2.5.0"
          TDENGINE_TAG: "3.0.2.4"
          OPENTS_TAG: "9aa7f88"
          MINIO_TAG: "RELEASE.2023-03-20T20-16-18Z"
          SUITEGROUP: ${{ matrix.suitegroup }}
          ENABLE_COVER_COMPILE: 1
          CT_COVER_EXPORT_PREFIX: ${{ matrix.profile }}-${{ matrix.otp }}-sg${{ matrix.suitegroup }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/ct/run.sh --ci --app ${{ matrix.app }} --keep-up

      - name: make cover
        run: |
          docker exec -e PROFILE="$PROFILE" -t erlang make cover

      - name: send to coveralls
        if: github.repository == 'emqx/emqx'
        run: |
          ls _build/test/cover/*.coverdata || exit 0
          docker exec -e PROFILE="$PROFILE" -t erlang make coveralls

      - name: rebar3.crashdump
        if: failure()
        run: cat rebar3.crashdump

      - name: compress logs
        if: failure()
        run: tar -czf logs.tar.gz _build/test/logs

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: failure()
        with:
          name: logs-${{ matrix.profile }}-${{ matrix.prefix }}-${{ matrix.otp }}-sg${{ matrix.suitegroup }}
          path: logs.tar.gz
          compression-level: 0
          retention-days: 7

  ct:
    needs:
      - sanity-checks
      - compile
    runs-on: ${{ github.repository_owner == 'emqx' && fromJSON('["self-hosted","ephemeral","linux","x64"]') || 'ubuntu-22.04' }}
    name: "${{ matrix.app }}-${{ matrix.suitegroup }} (${{ matrix.profile }})"
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.sanity-checks.outputs.ct-host) }}

    container: "ghcr.io/emqx/emqx-builder/${{ matrix.builder }}:${{ matrix.elixir }}-${{ matrix.otp }}-ubuntu22.04"
    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    env:
      PROFILE: ${{ matrix.profile }}
      SUITEGROUP: ${{ matrix.suitegroup }}
      ENABLE_COVER_COMPILE: 1
      CT_COVER_EXPORT_PREFIX: ${{ matrix.profile }}-${{ matrix.otp }}-sg${{ matrix.suitegroup }}

    steps:
      - uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: ${{ matrix.profile }}
      - name: extract artifact
        run: |
          unzip -o -q ${{ matrix.profile }}.zip
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

        # produces $PROFILE-<app-name>-<otp-vsn>-sg<suitegroup>.coverdata
      - name: run common tests
        run: make "${{ matrix.app }}-ct"

      - run: make cover

      - name: send to coveralls
        if: github.repository == 'emqx/emqx'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls _build/test/cover/*.coverdata || exit 0
          make coveralls

      - run: cat rebar3.crashdump
        if: failure()

      - name: compress logs
        if: failure()
        run: tar -czf logs.tar.gz _build/test/logs

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: failure()
        with:
          name: logs-${{ matrix.profile }}-${{ matrix.prefix }}-${{ matrix.otp }}-sg${{ matrix.suitegroup }}
          path: logs.tar.gz
          compression-level: 0
          retention-days: 7

  tests_passed:
    needs:
      - eunit_and_proper
      - ct
      - ct_docker
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false

    permissions:
      pull-requests: write

    steps:
      - name: Coveralls finished
        if: github.repository == 'emqx/emqx'
        uses: coverallsapp/github-action@3dfc5567390f6fa9267c0ee9c251e4c8c3f18949 # v2.2.3
        with:
          parallel-finished: true
          git-branch: ${{ github.ref }}
          git-commit: ${{ github.sha }}

      - run: echo "All tests passed"

  # run_test_cases:
  #   needs:
  #     - sanity-checks
  #     - compile
  #   uses: ./.github/workflows/run_test_cases.yaml
  #   with:
  #     builder: ${{ needs.sanity-checks.outputs.builder }}
  #     ct-matrix: ${{ needs.sanity-checks.outputs.ct-matrix }}
  #     ct-host: ${{ needs.sanity-checks.outputs.ct-host }}
  #     ct-docker: ${{ needs.sanity-checks.outputs.ct-docker }}

  static_checks:
    needs:
      - sanity-checks
      - compile
    uses: ./.github/workflows/static_checks.yaml
    with:
      builder: ${{ needs.sanity-checks.outputs.builder }}
      ct-matrix: ${{ needs.sanity-checks.outputs.ct-matrix }}

  build_slim_packages:
    needs:
      - sanity-checks
    uses: ./.github/workflows/build_slim_packages.yaml
    with:
      builder: ${{ needs.sanity-checks.outputs.builder }}
      builder_vsn: ${{ needs.sanity-checks.outputs.builder_vsn }}
      otp_vsn: ${{ needs.sanity-checks.outputs.otp_vsn }}
      elixir_vsn: ${{ needs.sanity-checks.outputs.elixir_vsn }}

  build_docker_for_test:
    needs:
      - sanity-checks
    uses: ./.github/workflows/build_docker_for_test.yaml
    with:
      otp_vsn: ${{ needs.sanity-checks.outputs.otp_vsn }}
      elixir_vsn: ${{ needs.sanity-checks.outputs.elixir_vsn }}
      version-emqx: ${{ needs.sanity-checks.outputs.version-emqx }}
      version-emqx-enterprise: ${{ needs.sanity-checks.outputs.version-emqx-enterprise }}

  spellcheck:
    needs:
      - sanity-checks
      - build_slim_packages
    uses: ./.github/workflows/spellcheck.yaml

  run_conf_tests:
    needs:
      - sanity-checks
      - compile
    uses: ./.github/workflows/run_conf_tests.yaml
    with:
      builder: ${{ needs.sanity-checks.outputs.builder }}

  check_deps_integrity:
    needs:
      - sanity-checks
    uses: ./.github/workflows/check_deps_integrity.yaml
    with:
      builder: ${{ needs.sanity-checks.outputs.builder }}

  run_jmeter_tests:
    needs:
      - sanity-checks
      - build_docker_for_test
    uses: ./.github/workflows/run_jmeter_tests.yaml
    with:
      version-emqx: ${{ needs.sanity-checks.outputs.version-emqx }}

  run_docker_tests:
    needs:
      - sanity-checks
      - build_docker_for_test
    uses: ./.github/workflows/run_docker_tests.yaml
    with:
      version-emqx: ${{ needs.sanity-checks.outputs.version-emqx }}
      version-emqx-enterprise: ${{ needs.sanity-checks.outputs.version-emqx-enterprise }}

  run_helm_tests:
    needs:
      - sanity-checks
      - build_docker_for_test
    uses: ./.github/workflows/run_helm_tests.yaml
    with:
      version-emqx: ${{ needs.sanity-checks.outputs.version-emqx }}
      version-emqx-enterprise: ${{ needs.sanity-checks.outputs.version-emqx-enterprise }}
