name: Integration Test Suite

on:
  push:
#    tags:
#      - e*
#  release:
#    types:
#      - published
#  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      imgname: ${{ steps.build_docker.outputs.imgname}}
      version: ${{ steps.build_docker.outputs.version}}
    steps:
      - uses: actions/checkout@v2
      - name: build docker
        id: build_docker
        run: |
          make emqx-docker
          echo "::set-output name=version::$(./pkg-vsn.sh)"
          echo "::set-output name=imgname::emqx"
      - name: package docker
        id: package_docker
        run: |
          docker save -o ${{ steps.build_docker.outputs.imgname }}-docker-${{ steps.build_docker.outputs.version }}.tar emqx/emqx:${{ steps.build_docker.outputs.version }}
      - uses: actions/upload-artifact@v2
        with:
          name: emqx-docker-image-tar
          path: ${{ steps.build_docker.outputs.imgname }}-docker-${{ steps.build_docker.outputs.version }}.tar

  mysql:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        mysql_tag:
          - 5.7
          - 8
        mysql_type:
#          - mysql_auth_acl

    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: emqx-docker-image-tar
          path: /tmp
      - name: load docker image
        env:
          imgname: ${{ needs.build.outputs.imgname }}
          version: ${{ needs.build.outputs.version }}
        run: |
          docker load < /tmp/${imgname}-docker-${version}.tar
      - name: docker compose up
        timeout-minutes: 5
        env:
          TARGET: emqx/${{ needs.build.outputs.imgname }}
          EMQX_TAG: ${{ needs.build.outputs.version }}
          MYSQL_TAG: ${{ matrix.mysql_tag }}
        run: |
          docker-compose \
            -f .ci/docker-compose-file/docker-compose-emqx-cluster.yaml \
            -f .ci/docker-compose-file/docker-compose-mysql-tls.yaml \
            up -d --build
      - name: wait docker compose up
        timeout-minutes: 5
        run: |
          while [ "$(docker inspect -f '{{ .State.Health.Status}}' node1.emqx.io)" != "healthy" ] || [ "$(docker inspect -f '{{ .State.Health.Status}}' node2.emqx.io)" != "healthy" ]; do
            echo "['$(date -u +"%y-%m-%dt%h:%m:%sz")']:waiting emqx";
            sleep 5;
          done
          while [ $(docker ps -a --filter name=client --filter exited=0 | wc -l) \
               != $(docker ps -a --filter name=client | wc -l) ]; do
            sleep 1
          done
          docker ps -a
          echo HAPROXY_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' haproxy) >> $GITHUB_ENV
          echo MYSQL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql) >> $GITHUB_ENV
      - uses: actions/checkout@v2
        with:
          repository: emqx/emqx-fvt
          ref: v1.4.0
          path: scripts
      - uses: actions/setup-java@v1
        with:
          java-version: '8.0.282' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - name: install jmeter
        timeout-minutes: 10
        env:
          JMETER_VERSION: 5.3
        run: |
          wget --no-verbose --no-check-certificate -O /tmp/apache-jmeter.tgz https://downloads.apache.org/jmeter/binaries/apache-jmeter-$JMETER_VERSION.tgz
          cd /tmp && tar -xvf apache-jmeter.tgz
          echo "jmeter.save.saveservice.output_format=xml" >> /tmp/apache-jmeter-$JMETER_VERSION/user.properties
          echo "jmeter.save.saveservice.response_data.on_error=true" >> /tmp/apache-jmeter-$JMETER_VERSION/user.properties
          wget --no-verbose -O /tmp/apache-jmeter-$JMETER_VERSION/lib/ext/mqtt-xmeter-2.0.2-jar-with-dependencies.jar https://raw.githubusercontent.com/xmeter-net/mqtt-jmeter/master/Download/v2.0.2/mqtt-xmeter-2.0.2-jar-with-dependencies.jar
          ln -s /tmp/apache-jmeter-$JMETER_VERSION /opt/jmeter
      - name: install jmeter plugin
        run: |
          wget --no-verbose -O "/opt/jmeter/lib/mysql-connector-java-8.0.16.jar" https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.16/mysql-connector-java-8.0.16.jar
      - name: run jmeter
        run: |
          /opt/jmeter/bin/jmeter.sh \
            -Jjmeter.save.saveservice.output_format=xml -n \
            -t scripts/.ci/automate-test-suite/${{ matrix.mysql_type }}.jmx \
            -Droute="apps/emqx_auth_mysql/test/emqx_auth_mysql_SUITE_data" \
            -Dmysql_ip=$MYSQL_IP \
            -Demqx_ip=$HAPROXY_IP \
            -Ddbname="mqtt" \
            -Dmysql_user="ssluser" \
            -Ddb_user="root" \
            -Dmysql_pwd="public" \
            -Dconfig_path="/tmp/etc" \
            -Ddocker_path=".ci/docker-compose-file" \
            -l jmeter_logs/${{ matrix.mysql_type }}_${{ matrix.mysql_tag }}.jtl \
            -j jmeter_logs/logs/${{ matrix.mysql_type }}_${{ matrix.mysql_tag }}.log
      - name: check logs
        run: |
          if cat jmeter_logs/${{ matrix.mysql_type }}_${{ matrix.mysql_tag }}.jtl | grep -e '<failure>true</failure>' > /dev/null 2>&1; then
            echo "check logs filed"
            exit 1
          fi
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: jmeter_logs
          path: ./jmeter_logs


#  delete-artifact:
#    runs-on: ubuntu-20.04
#    needs: [mysql]
#    steps:
#      - uses: geekyeggo/delete-artifact@v1
#        with:
#          name: emqx-broker